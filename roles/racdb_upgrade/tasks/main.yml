---

  - name: TEMPLATE_UPGDB | compile invalid database objects
    template: src=roles/racdb_preupgrade/templates/recomp.sh.j2 dest={{ stage_dir }}/recomp.sh mode=0755

  - name: TEMPLATE_UPGDB | disable user triggers
    template: src=roles/racdb_preupgrade/templates/disable_triggers.sh.j2 dest={{ stage_dir }}/disable_triggers.sh mode=0755

  - name: TEMPLATE_UPGDB | enable user triggers
    template: src=roles/racdb_upgrade/templates/postupgrade_enaable_triggers.sh.j2 dest={{ stage_dir }}/postupgrade_enable_triggers.sh mode=0755

  - name: TEMPLATE_UPGDB | disable concurrent statistics gathering
    template: src=roles/racdb_preupgrade/templates/set_global_stats.sh.j2 dest={{ stage_dir }}/set_global_stats.sh mode=0755

  - name: TEMPLATE_UPGDB | database health check
    template: src=roles/racdb_preupgrade/templates/hcheck4.sh.j2 dest={{ stage_dir }}/hcheck4.sh mode=0755

  - name: TEMPLATE_UPGDB | purge-recyclebin Tool
    template: src=roles/racdb_preupgrade/templates/dbprgrcylbin.sh.j2 dest={{ stage_dir }}/dbprgrcylbin.sh mode=0755

  - name: TEMPLATE_UPGDB | gather-dictionary stats Tool
    template: src=roles/racdb_preupgrade/templates/dbdctstat.sh.j2 dest={{ stage_dir }}/dbdctstat.sh mode=0755

  - name: TEMPLATE_UPGDB | execute catalog upgrade script
    template: src=roles/racdb_upgrade/templates/catupgrade.sh.j2 dest={{ stage_dir }}/catupgrade.sh mode=0755

  - name: TEMPLATE_UPGDB | post-upgrade Information Tool
    template: src=roles/racdb_upgrade/templates/postupgrade_fixup.sh.j2 dest={{ stage_dir }}/postupgrade_fixups.sh mode=0755

  - name: TEMPLATE_UPGDB | Remove deprecated parameters
    template: src=roles/racdb_upgrade/templates/reset_dep_params.sh.j2 dest={{ stage_dir }}/reset_dep_params.sh mode=0755

  - name: TEMPLATE_UPGDB | Show database components (First nodes)
    template: src=roles/racdb_upgrade/templates/comps.sh.j2 dest={{ stage_dir }}/comps.sh mode=0755

  - name: TEMPLATE_UPGDB | Show database components (First nodes)
    template: src=roles/racdb_upgrade/templates/dbstartup_upgrade.sh.j2 dest={{ stage_dir }}/dbstartup_upgrade.sh mode=0755

  - name: TEMPLATE_UPGDB | report invalid object Tool
    template: src=roles/racdb_preupgrade/templates/dbinvobj.sh.j2 dest={{ stage_dir }}/dbinvobj.sh mode=0755

  - name: TEMPLATE_UPGDB | Execute post upgrade timezone file upgrade for cdb
    template: src=roles/racdb_upgrade/templates/postupgrade_tz_cdb.sh.j2 dest={{ stage_dir }}/postupgrade_tz_cdb.sh mode=0755

  - name: TEMPLATE_UPGDB | Execute post upgrade timezone file upgrade for pdb 
    template: src=roles/racdb_upgrade/templates/postupgrade_tz_pdb.sh.j2 dest={{ stage_dir }}/postupgrade_tz_pdb.sh mode=0755

  - name: TEMPLATE_UPGDB | Execute post upgrade script postupgrade_fixups.sql
    template: src=roles/racdb_upgrade/templates/postupgrade_fixup.sh.j2 dest={{ stage_dir }}/postupgrade_fixup.sh mode=0755

  - name: TEMPLATE_UPGDB | Execute post upgrade script utlu122s.sql
    template: src=roles/racdb_upgrade/templates/postupgrade_utlu122s.sh.j2 dest={{ stage_dir }}/postupgrade_utlu122s.sh mode=0755

  - name: TEMPLATE_UPGDB | Execute post upgrade script catuppst.sql
    template: src=roles/racdb_upgrade/templates/postupgrade_catuppst.sh.j2 dest={{ stage_dir }}/postupgrade_catuppst.sh mode=0755

  - name: TEMPLATE_UPGDB | Execute post upgrade diagnostic script dbupgdiag.sql 
    template: src=roles/racdb_upgrade/templates/postupgrade_dbupgdiag.sh.j2 dest={{ stage_dir }}/postupgrade_dbupgdiag.sh mode=0755

  - name: TEMPLATE_UPGDB | Recompile invalid objects before restrt database from new ORACLE_HOME with sqlplus 
    template: src=roles/racdb_upgrade/templates/postupgrade_recompile.sh.j2 dest={{ stage_dir }}/postupgrade_recompile.sh mode=0755

  - name: TEMPLATE_UPGDB | Execute post upgrade recompilation using catcon.pl
    template: src=roles/racdb_upgrade/templates/postupgrade_utlrp.sh.j2 dest={{ stage_dir }}/postupgrade_utlrp.sh mode=0755

  - name: Create LogFile  Directory
    file:
     path: /tmp/18cCDBUPGRD/{{ oracle_sid }}
     state: directory
     owner: "{{ oracle_install_user }}"
     group: "{{ oracle_install_group }}"
     mode: 0755

  - name: Copy database SQL script to target database server
    when: inventory_hostname in groups['racdb01']
    copy: src=roles/racdb_upgrade/files/{{ item }} dest={{ stage_dir }} mode=0755
    with_items:
      - recomp.sql
      - set_global_stats.sql
      - comps.sql
      - hcheck4.sql
      - dbinvobj.sql
      - dbupgdiag.sql
      - dbdctstat.sql
      - reset_dep_params.sql
      - startup_upg.sql
      - postupgrade_tz_cdb.sql
      - postupgrade_tz_pdb.sql
      - countstarTSTZ.sql
      - countstatsTSTZ.sql
      - upg_tzv_apply.sql
      - upg_tzv_check.sql

  - name: Upgrade_Database | disable user trigger [OLD_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: '{{ stage_dir }}/disable_triggers.sh > {{ logdir }}/disable_triggers.log 2>&1'

  - name: Upgrade_Database | Remove deprecated parameters [OLD_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: '{{ stage_dir }}/reset_dep_params.sh > {{ logdir }}/reset_dep_params.log 2>&1'

  - name: Upgrade_Database | compile invalid database objects [OLD_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: '{{ stage_dir }}/recomp.sh > {{ logdir }}/recomp.log 2>&1'

  - name: Upgrade_Database | report invalid objects [OLD_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: '{{ stage_dir }}/dbinvobj.sh > {{ logdir }}/dbinvobj.log 2>&1'

  - name: Upgrade_Database | disable cluster_database database parameter [OLD_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: export ORACLE_HOME={{ old_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; echo "{{ item }};" | {{ old_oracle_home }}/bin/sqlplus / as sysdba
    register: sqlplus_result
    failed_when: "'ERROR' in sqlplus_result.stdout or sqlplus_result.rc != 0"
    with_items:
      - alter system set cluster_database=false scope=spfile

  - name: Upgrade_Database | disable database [OLD_ORACLE_HOME]
    shell: export ORACLE_HOME={{ old_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; export PATH=$PATH:$ORACLE_HOME/bin; srvctl disable database -d {{ target_dbuname }}
    become_user: "{{ oracle_install_user }}"
    ignore_errors: True

  - name: Upgrade_Database | Stop cluster database [OLD_ORACLE_HOME]
    shell: export ORACLE_HOME={{ old_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; export PATH=$PATH:$ORACLE_HOME/bin; srvctl stop database -d {{ target_dbuname }}
    become_user: "{{ oracle_install_user }}"

  - name: Upgrade_Database | Copy database related files to NEW_ORACLE_HOME
    remote_user: "{{ oracle_install_user }}"
    shell: 'cp -vp {{ old_oracle_home }}/dbs/*{{ target_dbname }}* {{ new_oracle_home }}/dbs/'

  - name: Upgrade_Database | Modify oratab (first nodes)
    remote_user: "{{ root_user }}"
    when: inventory_hostname in groups['racdb01']
    replace:
        path: "{{ oratab }}"
        regexp: '{{ target_dbname }}*:{{ old_oracle_home }}'
        replace: '{{ item }}:{{ new_oracle_home }}'
    with_items:
        - "{{ target_dbname }}1"

  - name: Upgrade_Database | Modify oratab (second nodes)
    remote_user: "{{ root_user }}"
    when: inventory_hostname in groups['racdb02']
    replace:
        path: "{{ oratab }}"
        regexp: '{{ target_dbname }}*:{{ old_oracle_home }}'
        replace: '{{ item }}:{{ new_oracle_home }}'
    with_items:
        - "{{ target_dbname }}2"

  - name: Upgrade_Database | Start database in upgrade mode [NEW_ORACLE_HOME]
    remote_user: "{{ oracle_install_user }}"
    when: inventory_hostname in groups['racdb01']
    shell: 'export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; export PATH=$PATH:$ORACLE_HOME/bin; {{ stage_dir }}/dbstartup_upgrade.sh'

  - name: Upgrade_Database | create Guarantee Restore Point [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; echo "{{ item }};" | {{ new_oracle_home }}/bin/sqlplus / as sysdba
    register: sqlplus_result
    failed_when: "'ERROR' in sqlplus_result.stdout or sqlplus_result.rc != 0"
    with_items:
      - create restore point {{ RESTORE_POINT }} guarantee flashback database
      - create restore point {{ RESTORE_POINT }}_{{ PDB_NAME }} for pluggable database {{ PDB_NAME }} guarantee flashback database

  - name: Upgrade_Database | Execute catupgrd.spl script to upgrade the database to 18c [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: '{{ stage_dir }}/catupgrade.sh'

#  - name: Upgrade_Database | Start database in normal mode [NEW_ORACLE_HOME]
#    remote_user: "{{ oracle_install_user }}"
#    when: inventory_hostname in groups['racdb01']
#    shell: export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; echo "{{ item }};" | {{ new_oracle_home }}/bin/sqlplus / as sysdba
#    register: sqlplus_result
#    failed_when: "'ERROR' in sqlplus_result.stdout or sqlplus_result.rc != 0"
#    with_items:
#       - shutdown abort
#       - startup
#       - alter pluggable database all open

  - name: Upgrade_Database | Update timezone file version of the cdb database [NEW_ORACLE_HOME] 
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: 'export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; {{ stage_dir }}/postupgrade_tz_cdb.sh > {{ logdir }}/postupgrade_tz_cdb.log 2>&1'
    ignore_errors: True

  - name: Upgrade_Database | Update timezone file version of the pdb database [NEW_ORACLE_HOME] 
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: 'export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; {{ stage_dir }}/postupgrade_tz_pdb.sh > {{ logdir }}/postupgrade_tz_pdb.log 2>&1'
    ignore_errors: True

  - name: Upgrade_Database | Start database in normal mode [NEW_ORACLE_HOME]
    remote_user: "{{ oracle_install_user }}"
    when: inventory_hostname in groups['racdb01']
    shell: export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; echo "{{ item }};" | {{ new_oracle_home }}/bin/sqlplus / as sysdba
    register: sqlplus_result
    failed_when: "'ERROR' in sqlplus_result.stdout or sqlplus_result.rc != 0"
    with_items:
       - shutdown abort
       - startup
       - alter pluggable database all open

  - name: Upgrade_Database | Execute postupgrade_fixups.sql script to 18c [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: '{{ stage_dir }}/postupgrade_fixup.sh'

  - name: Upgrade_Database | Execute postupgrade script utlu122s.sql to 18c [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: '{{ stage_dir }}/postupgrade_utlu122s.sh'

  - name: Upgrade_Database | Execute postupgrade script catuppst.sql to 18c [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: '{{ stage_dir }}/postupgrade_catuppst.sh'

  - name: Upgrade_Database |  validate the integrity of the source database [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: 'export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; {{ stage_dir }}/postupgrade_dbupgdiag.sh > {{ logdir }}/dbupgdiag.log 2>&1'

  - name: Upgrade_Database |  Recompile invalid objects from new ORACLE_HOME with sqlplus [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: 'export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; {{ stage_dir }}/postupgrade_recompile.sh > {{ logdir }}/postupgrade_recompile.log 2>&1'

  - name: Upgrade_Database | Enable user trigger [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: 'export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; {{ stage_dir }}/postupgrade_enable_triggers.sh > {{ logdir }}/postupgrade_enable_triggers.log 2>&1'

  - name: Upgrade_Database | Modify CRS database configuration with new ORACLE_HOME [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; export PATH=$PATH:$ORACLE_HOME/bin; srvctl upgrade database -d {{ target_dbuname }} -o {{ new_oracle_home }}

  - name: Upgrade_Database | enable cluster_database database parameter [NEW_ORACLE_HOME]
    remote_user: "{{ oracle_install_user }}"
    when: inventory_hostname in groups['racdb01']
    shell: export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; export PATH=$PATH:$ORACLE_HOME/bin; echo "{{ item }};" | {{ new_oracle_home }}/bin/sqlplus / as sysdba
    register: sqlplus_result
    failed_when: "'ERROR' in sqlplus_result.stdout or sqlplus_result.rc != 0"
    with_items:
      - alter system set cluster_database=true scope=spfile
      - shutdown immediate

  - name: Upgrade_Database | enable cluster database [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; export PATH=$PATH:$ORACLE_HOME/bin; srvctl enable database -d {{ target_dbuname }}
    ignore_errors: True

  - name: Upgrade_Database | Start cluster database using srvctl [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    become_user: "{{ oracle_install_user }}"
    shell: export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ oracle_sid }}; export PATH=$PATH:$ORACLE_HOME/bin; srvctl start database -d {{ target_dbuname }}

  - name: Upgrade_Database | Show database components [NEW_ORACLE_HOME]
    when: inventory_hostname in groups['racdb01']
    remote_user: "{{ oracle_install_user }}"
    shell: 'export ORACLE_HOME={{ new_oracle_home }}; export ORACLE_SID={{ target_dbname }}; {{ stage_dir }}/comps.sh > {{ logdir }}/comps.log 2>&1'
